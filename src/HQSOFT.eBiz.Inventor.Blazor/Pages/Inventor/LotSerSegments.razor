@page "/Inventor/LotSerSegments"



@attribute [Authorize(InventorPermissions.LotSerSegments.Default)]
@using global::HQSOFT.eBiz.Inventor.LotSerSegments
@using global::HQSOFT.eBiz.Inventor.Localization
@using global::HQSOFT.eBiz.Inventor.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Components.Web
@using Blazorise
@using Blazorise.Components
@using Blazorise.DataGrid
@using Volo.Abp.BlazoriseUI
@using Volo.Abp.BlazoriseUI.Components
@using Volo.Abp.ObjectMapping
@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout
@using global::HQSOFT.eBiz.Inventor.Permissions
@using Microsoft.AspNetCore.Components
@using Volo.Abp.AspNetCore.Components.Web
@using Volo.Abp.Http.Client
@inherits InventorComponentBase
@inject ILotSerSegmentsAppService LotSerSegmentsAppService
@inject IUiMessageService UiMessageService
@inject IRemoteServiceConfigurationProvider RemoteServiceConfigurationProvider
@inject NavigationManager NavigationManager
@using HQSOFT.eBiz.Inventor.LotSerSegments


@* ************************* PAGE HEADER ************************* *@
<PageHeader Title="@L["LotSerSegments"]" BreadcrumbItems="BreadcrumbItems" Toolbar="Toolbar">

</PageHeader>

@* ************************* SEARCH ************************* *@
<Card>
    <CardBody>
        <Form id="LotSerSegmentSearchForm" class="mb-3">
            <Addons>
                <Addon AddonType="AddonType.Body">
                    <TextEdit @bind-Text="@Filter.FilterText"
                              Autofocus="true"
                              Placeholder="@L["Search"]">
                    </TextEdit>
                </Addon>
                <Addon AddonType="AddonType.End">
                    <SubmitButton Form="LotSerSegmentSearchForm" Clicked="GetLotSerSegmentsAsync">
                        <Icon Name="IconName.Search" Class="me-1"></Icon>@L["Search"]
                    </SubmitButton>
                </Addon>
            </Addons>
        </Form>
    </CardBody>
</Card>

@* ************************* DATA GRID ************************* *@
<Card>
    <CardBody>
        <DataGrid TItem="LotSerSegmentDto"
                  Data="LotSerSegmentList"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  Responsive="true"
                  PageSize="PageSize">
            <DataGridColumns>
                <DataGridEntityActionsColumn TItem="LotSerSegmentDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="LotSerSegmentDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="LotSerSegmentDto"
                                          Visible="@CanEditLotSerSegment"
                                          Clicked="async () => await OpenEditLotSerSegmentModalAsync(context)"
                                          Text="@L["Edit"]"></EntityAction>
                            <EntityAction TItem="LotSerSegmentDto"
                                          Visible="@CanDeleteLotSerSegment"
                                          Clicked="() => DeleteLotSerSegmentAsync(context)"
                                          ConfirmationMessage="@(()=> L["DeleteConfirmationMessage"])"
                                          Text="@L["Delete"]"></EntityAction>
                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>
               
              <DataGridColumn TItem="LotSerSegmentDto"
                      Field="SegmentID"
                      Caption="@L["SegmentID"]">
              </DataGridColumn>

              <DataGridColumn TItem="LotSerSegmentDto"
                      Field="AsgmentType"
                      Caption="@L["AsgmentType"]">
                    <DisplayTemplate>
                        @L[$"Enum:Typeee.{context.AsgmentType.ToString("d")}"]
                    </DisplayTemplate>
              </DataGridColumn>


              <DataGridColumn TItem="LotSerSegmentDto"
                      Field="Value"
                      Caption="@L["Value"]">
              </DataGridColumn>

            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

@* ************************* CREATE MODAL ************************* *@
<Modal @ref="CreateLotSerSegmentModal" Closing="@CreateLotSerSegmentModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">
        <Form id="CreateLotSerSegmentForm">
            <ModalHeader>
                <ModalTitle>@L["NewLotSerSegment"]</ModalTitle>
                <CloseButton Clicked="CloseCreateLotSerSegmentModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@NewLotSerSegmentValidations"
                            Mode="ValidationMode.Auto"
                            Model="@NewLotSerSegment"
                            ValidateOnLoad="false">
                     
                    
                    <Validation>
                        <Field>
                            <FieldLabel>@L["SegmentID"]</FieldLabel>
                            <NumericPicker TValue="int" @bind-Value="@NewLotSerSegment.SegmentID"  Decimals="0" >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Field>
                        <FieldLabel>@L["AsgmentType"]</FieldLabel>
                        <Select TValue="Typeee" @bind-SelectedValue="@NewLotSerSegment.AsgmentType" >
                            @foreach (var itemValue in Enum.GetValues(typeof(Typeee)))
                            {
                                <SelectItem TValue="Typeee" Value="@((Typeee) itemValue)">
                                    @L[$"Enum:Typeee.{((Typeee) itemValue).ToString("d")}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>


                    <Validation>
                        <Field>
                            <FieldLabel>@L["Value"]</FieldLabel>
                            <TextEdit @bind-Text="@NewLotSerSegment.Value"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    
                    
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateLotSerSegmentModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="CreateLotSerSegmentForm" Clicked="CreateLotSerSegmentAsync" />
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@* ************************* EDIT MODAL ************************* *@
<Modal @ref="EditLotSerSegmentModal" Closing="@EditLotSerSegmentModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">
        <Form id="EditLotSerSegmentForm">
            <ModalHeader>
                <ModalTitle>@L["Update"]</ModalTitle>
                <CloseButton Clicked="CloseEditLotSerSegmentModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditingLotSerSegmentValidations"
                            Mode="ValidationMode.Auto"
                            Model="@EditingLotSerSegment"
                            ValidateOnLoad="false">
                     
                    
                    <Validation>
                        <Field>
                            <FieldLabel>@L["SegmentID"]</FieldLabel>
                            <NumericPicker TValue="int" @bind-Value="@EditingLotSerSegment.SegmentID"  Decimals="0" >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Field>
                        <FieldLabel>@L["AsgmentType"]</FieldLabel>
                        <Select TValue="Typeee" @bind-SelectedValue="@EditingLotSerSegment.AsgmentType" >
                            @foreach (var itemValue in Enum.GetValues(typeof(Typeee)))
                            {
                                <SelectItem TValue="Typeee" Value="@((Typeee) itemValue)">
                                    @L[$"Enum:Typeee.{((Typeee) itemValue).ToString("d")}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>


                    <Validation>
                        <Field>
                            <FieldLabel>@L["Value"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingLotSerSegment.Value"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    
                    
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditLotSerSegmentModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="CreateLotSerSegmentForm" Clicked="UpdateLotSerSegmentAsync" />
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>
